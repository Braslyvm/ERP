@page
@model proyecto1bases.Pages.CotizacionesVentasModel
@{
    ViewData["Title"] = "Cotizaciones y Ventas por Departamento";
}

<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>@ViewData["Title"]</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
        <link rel="stylesheet" href="~/css/index.css">
    <style>
        body {
            font-family: 'Arial', sans-serif;
            background-color: #f0f4ff;
            margin: 0;
            padding: 0;
        }
        .container {
            width: 90%;
            max-width: 800px;
            padding: 20px;
            background-color: #ffffff;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            margin: 50px auto;
        }
        h1 {
            font-size: 2rem;
            color: #004085;
            text-align: center;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>@ViewData["Title"]</h1>

        <form method="get">
            <label for="fechaInicio">Fecha Inicio:</label>
            <input type="date" id="fechaInicio" name="FechaInicio" value="@Model.FechaInicio?.ToString("yyyy-MM-dd")" />

            <label for="fechaFin">Fecha Fin:</label>
            <input type="date" id="fechaFin" name="FechaFin" value="@Model.FechaFin?.ToString("yyyy-MM-dd")" />

            <button type="submit">Filtrar</button>
        </form>

        <canvas id="cotizacionesVentasChart" width="400" height="300"></canvas>

        <script>
            // ComprobaciÃ³n de datos
            const departamentos = @Html.Raw(Json.Serialize(Model.Departamentos.Select(d => d.Departamento).Distinct()));
            const cantidadCotizacion = @Html.Raw(Json.Serialize(Model.Departamentos.Select(d => d.CantidadCotizacion)));
            const cantidadVentas = @Html.Raw(Json.Serialize(Model.Departamentos.Select(d => d.CantidadVentas)));

            console.log("Departamentos:", departamentos);
            console.log("Cantidad de Cotizaciones:", cantidadCotizacion);
            console.log("Cantidad de Ventas:", cantidadVentas);

            var ctx = document.getElementById('cotizacionesVentasChart').getContext('2d');
            var cotizacionesVentasChart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: departamentos,
                    datasets: [
                        {
                            label: 'Cantidad de Cotizaciones',
                            data: cantidadCotizacion,
                            backgroundColor: 'rgba(54, 162, 235, 0.2)',
                            borderColor: 'rgba(54, 162, 235, 1)',
                            borderWidth: 1
                        },
                        {
                            label: 'Cantidad de Ventas',
                            data: cantidadVentas,
                            backgroundColor: 'rgba(255, 99, 132, 0.2)',
                            borderColor: 'rgba(255, 99, 132, 1)',
                            borderWidth: 1
                        }
                    ]
                },
                options: {
                    responsive: true,
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    },
                    plugins: {
                        tooltip: {
                            callbacks: {
                                label: function(tooltipItem) {
                                    return tooltipItem.dataset.label + ": " + tooltipItem.raw.toLocaleString();
                                }
                            }
                        }
                    }
                }
            });
        </script>
    </div>
    <form method="get" action="/menus/Reportes">
        <button type="submit" class="boton-volver">Volver</button>
    </form>
</body>
</html>
